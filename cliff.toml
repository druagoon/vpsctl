# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog footer
header = """
<!-- markdownlint-disable MD024 MD033 -->
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[⚠️[**breaking**](breaking-{{ version }})⚠️] {% endif %}\
        {{ commit.message | upper_first }} \
        ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\

{% set has_breaking = false %}\
{% for commit in commits %}\
    {% if commit.breaking %}\
        {% set_global has_breaking = true %}\
        {% break %}\
    {% endif %}\
{% endfor %}\

{% if has_breaking %}
    ### <a id="breaking-{{ version }}"></a>Breaking Changes

    {% for commit in commits -%}
        {% if commit.breaking -%}
            - **{{ commit.message | upper_first }}** ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}))<br />{{ commit.breaking_description }}
        {% endif -%}
    {% endfor -%}
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{%- endfor %}

"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                $REPO/compare/{{ release.previous.version }}..{{ release.version }}
        {% else -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                $REPO/releases/tag/{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: $REPO/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# An array of commit postprocessors for manipulating the changelog before outputting
postprocessors = [
    { pattern = '\$REPO', replace = "https://github.com/druagoon/vpsctl" },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}]($REPO/issues/${2}))" }, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^style", skip = true },
    { message = "^test", skip = true },
    { message = "^chore", skip = true },
    { message = "^docs", skip = true },
    { message = "^refactor", group = "<!-- 6 -->refactor" },
    { message = "^perf", group = "<!-- 4 -->Performance" },
    { body = ".*security", group = "<!-- 5 -->Security" },
    { body = ".*[dD]eprecate.*", group = "<!-- 7 -->Deprecated" },
    { message = "^revert", group = "<!-- 8 -->Revert" },
    { message = "^fix", group = "<!-- 3 -->Fixed" },
    { message = "^.*: fix ", group = "<!-- 3 -->Fixed" },
    { message = "^.*: (remove|delete) ", group = "<!-- 2 -->Removed" },
    { message = "^.*: (update|change|rename) ", group = "<!-- 1 -->Changed" },
    { message = "^feat", group = "<!-- 0 -->Added" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

# link_parsers = [
#     { pattern = "[fF]ixes #(\\d+)", text = "fixes [#${1}]", href = "$REPO/issues/$1" },
#     { pattern = "[cC]loses #(\\d+)", text = "closes [#${1}]", href = "$REPO/issues/$1" },
#     { pattern = "[sS]ee #(\\d+)", text = "see [#${1}]", href = "$REPO/issues/$1" },
# ]
